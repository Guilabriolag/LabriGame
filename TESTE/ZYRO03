<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>ZYRO v0.3 - Mundo Aberto Otimizado</title>
    <style>
        /* [ESTILOS ZYRO v0.2 - Mantidos] */
        body {
            box-sizing: border-box;
            background: #1e293b; /* Fundo mais Sci-Fi */
        }
        
        html, body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            height: 100%;
            width: 100%;
            touch-action: none;
            font-family: 'Orbitron', Arial, sans-serif;
        }

        canvas {
            display: block;
            /* O fundo do CANVAS ser√° o "Terreno", desenhado no JS */
            background: #253344;
        }

        #hud {
            position: absolute;
            top: env(safe-area-inset-top, 10px);
            left: 10px;
            color: white;
            font: bold 14px Arial;
            background: rgba(0, 0, 0, 0.8);
            padding: 8px 12px;
            border-radius: 10px;
            border: 2px solid #00bfff;
            box-shadow: 0 0 10px rgba(0, 191, 255, 0.3);
            z-index: 1000;
        }

        #survival-hud {
            position: absolute;
            top: env(safe-area-inset-top, 10px);
            right: 10px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 10px;
            border-radius: 10px;
            border: 2px solid #00bfff;
            font: 12px Arial;
            z-index: 1000;
        }

        .survival-bar {
            width: 100px;
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            margin: 3px 0;
            overflow: hidden;
        }

        .survival-fill {
            height: 100%;
            transition: width 0.3s ease;
        }

        .hunger { background: linear-gradient(90deg, #ff6b35, #f7931e); }
        .thirst { background: linear-gradient(90deg, #4fc3f7, #29b6f6); }
        .oxygen { background: linear-gradient(90deg, #66bb6a, #43a047); }
        .energy { background: linear-gradient(90deg, #ffa726, #ff9800); }

        #joystick {
            position: absolute;
            bottom: calc(80px + env(safe-area-inset-bottom, 0));
            left: 30px;
            width: 120px;
            height: 120px;
            background: radial-gradient(circle, rgba(0, 191, 255, 0.3), rgba(0, 191, 255, 0.1));
            border: 3px solid rgba(0, 191, 255, 0.6);
            border-radius: 50%;
            touch-action: none;
            z-index: 1000;
        }

        #stick {
            position: absolute;
            left: 50%;
            top: 50%;
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #00bfff, #0080ff);
            border: 2px solid white;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            box-shadow: 0 0 10px rgba(0, 191, 255, 0.6);
        }

        .button {
            position: absolute;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            color: white;
            font: bold 18px Arial;
            text-align: center;
            line-height: 60px;
            background: rgba(0, 0, 0, 0.8);
            border: 3px solid;
            touch-action: none;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .button:active {
            transform: scale(0.95);
            box-shadow: 0 0 15px;
        }

        #buttonA {
            bottom: calc(80px + env(safe-area-inset-bottom, 0));
            right: 140px;
            background: linear-gradient(135deg, #dc2626, #991b1b);
            border-color: #ef4444;
        }

        #buttonB {
            bottom: calc(150px + env(safe-area-inset-bottom, 0));
            right: 70px;
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            border-color: #3b82f6;
        }

        #buttonC {
            bottom: calc(80px + env(safe-area-inset-bottom, 0));
            right: 70px;
            background: linear-gradient(135deg, #16a34a, #15803d);
            border-color: #22c55e;
        }

        #buttonD {
            bottom: calc(150px + env(safe-area-inset-bottom, 0));
            right: 140px;
            background: linear-gradient(135deg, #ea580c, #c2410c);
            border-color: #f97316;
        }
        
        /* [MINI MAPA - NOVO/AJUSTADO] */
        #minimap-container {
            position: absolute;
            top: env(safe-area-inset-top, 10px);
            left: calc(10px + 220px); /* Posiciona ao lado do HUD */
            border: 2px solid #00ffff;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 5px;
            z-index: 1000;
        }

        /* [INTERFACES - ZYRO v0.2 MANTIDAS] */
        .interface-panel {
            position: fixed; /* Fixado para funcionar com o canvas em fullscreen */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0f172a, #1e293b);
            color: white;
            display: none;
            z-index: 5000; /* M√°ximo Z-index */
            overflow-y: auto;
        }
        .interface-header {
            background: linear-gradient(90deg, #0ea5e9, #0284c7);
            padding: 15px;
            text-align: center;
            font: bold 18px Arial;
            border-bottom: 3px solid #00bfff;
        }
        .interface-content {
            padding: 20px;
        }
        .status-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        .status-card {
            background: rgba(0, 0, 0, 0.5);
            padding: 15px;
            border-radius: 10px;
            border: 2px solid #00bfff;
        }
        .status-card h3 {
            margin: 0 0 10px 0;
            color: #00bfff;
            font-size: 14px;
        }
        .equipment-slot {
            background: rgba(255, 255, 255, 0.1);
            border: 2px dashed #666;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            margin: 10px 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .equipment-slot.equipped {
            border-color: #00ff00;
            background: rgba(0, 255, 0, 0.1);
        }
        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 5px;
            margin: 15px 0;
        }
        .inventory-slot {
            aspect-ratio: 1;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid #666;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            cursor: pointer;
        }
        .inventory-slot.filled {
            border-color: #00bfff;
            background: rgba(0, 191, 255, 0.2);
        }
        .action-button {
            background: linear-gradient(135deg, #00bfff, #0080ff);
            border: none;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font: bold 14px Arial;
            cursor: pointer;
            margin: 5px;
            transition: all 0.3s ease;
        }
        .action-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 191, 255, 0.4);
        }
        .close-button {
            position: absolute;
            top: 15px;
            right: 15px;
            background: #dc2626;
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            font: bold 20px Arial;
            cursor: pointer;
        }
        #farming-interface {
            background: linear-gradient(135deg, #166534, #15803d);
        }
        .farming-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin: 20px 0;
        }
        .farming-plot {
            aspect-ratio: 1;
            background: #8b4513;
            border: 3px solid #654321;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 30px;
            cursor: pointer;
            position: relative;
        }
        .farming-plot.planted {
            background: #228b22;
            border-color: #32cd32;
        }
        .farming-plot.ready {
            background: #ffd700;
            border-color: #ffff00;
            animation: glow 2s ease-in-out infinite alternate;
        }
        @keyframes glow {
            from { box-shadow: 0 0 5px #ffff00; }
            to { box-shadow: 0 0 20px #ffff00; }
        }
        @keyframes fadeMessage {
            0% { opacity: 0; transform: translateX(-50%) translateY(-20px); }
            20%, 80% { opacity: 1; transform: translateX(-50%) translateY(0); }
            100% { opacity: 0; transform: translateX(-50%) translateY(-20px); }
        }
        #mission-panel {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.7);
            border: 2px solid #00bfff;
            color: white;
            font: 12px Arial;
            border-radius: 10px;
            padding: 10px;
            z-index: 1000;
            width: 220px;
        }
    </style>
</head>
<body>
    <div id="hud">√Årea: Nave Danificada | ‚ù§Ô∏è HP: 100%</div>
    <div id="survival-hud">
        <div>üçñ Fome: <div class="survival-bar"><div class="survival-fill hunger" style="width: 80%"></div></div></div>
        <div>üíß Sede: <div class="survival-bar"><div class="survival-fill thirst" style="width: 60%"></div></div></div>
        <div>ü´Å O¬≤: <div class="survival-bar"><div class="survival-fill oxygen" style="width: 90%"></div></div></div>
        <div>‚ö° Energia: <div class="survival-bar"><div class="survival-fill energy" style="width: 70%"></div></div></div>
    </div>
    
    <div id="minimap-container">
        <canvas id="minimapCanvas"></canvas>
    </div>

    <div id="joystick"><div id="stick"></div></div>
    <div id="buttonA" class="button">A</div>
    <div id="buttonB" class="button">B</div>
    <div id="buttonC" class="button">C</div>
    <div id="buttonD" class="button">D</div>

    <div id="ship-interface" class="interface-panel">
        <button class="close-button" onclick="closeInterface('ship-interface')">&times;</button>
        <div class="interface-header">üöÄ NAVE DANIFICADA - SISTEMA DE MANUTEN√á√ÉO</div>
        <div class="interface-content">
            <div class="status-grid">
                <div class="status-card">
                    <h3>üìä Status Vital</h3>
                    <div>Fome: <span id="hunger-text">80%</span></div>
                    <div>Sede: <span id="thirst-text">60%</span></div>
                    <div>Oxig√™nio: <span id="oxygen-text">90%</span></div>
                    <div>Energia: <span id="energy-text">70%</span></div>
                </div>
                <div class="status-card">
                    <h3>üéí Equipamentos</h3>
                    <div class="equipment-slot" id="backpack-slot" onclick="equipBackpack()">
                        <div>Mochila: Nenhuma</div>
                        <div style="font-size: 12px;">Clique para equipar</div>
                    </div>
                </div>
            </div>
            
            <div class="status-card">
                <h3>üì¶ Invent√°rio (<span id="inv-count">0</span>/<span id="inv-max">10</span>)</h3>
                <div class="inventory-grid" id="ship-inventory"></div>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
                <button class="action-button" onclick="consumeItem('food')">üçñ Comer</button>
                <button class="action-button" onclick="consumeItem('water')">üíß Beber</button>
                <button class="action-button" onclick="rest()">üò¥ Descansar</button>
            </div>
        </div>
    </div>

    <div id="bunker-interface" class="interface-panel" style="background: linear-gradient(135deg, #166534, #15803d);">
        <button class="close-button" onclick="closeInterface('bunker-interface')">&times;</button>
        <div class="interface-header">üè† BUNKER AGR√çCOLA - SISTEMA DE CULTIVO</div>
        <div class="interface-content">
            <div class="status-card">
                <h3>üå± Planta√ß√£o Hidrop√¥nica</h3>
                <div class="farming-grid" id="farming-plots"></div>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
                <button class="action-button" onclick="plantCrop('potato')">ü•î Plantar Batata</button>
                <button class="action-button" onclick="plantCrop('oxygen-plant')">üåø Plantar O¬≤ Plant</button>
                <button class="action-button" onclick="waterPlants()">üíß Regar Plantas</button>
                <button class="action-button" onclick="harvestAll()">üåæ Colher Tudo</button>
            </div>
            
            <div class="status-card" style="margin-top: 20px;">
                <h3>üìä Recursos Dispon√≠veis</h3>
                <div>üíß √Ågua: <span id="water-count">0</span></div>
                <div>ü•î Sementes de Batata: <span id="potato-seeds">0</span></div>
                <div>üåø Mudas de O¬≤: <span id="oxygen-seeds">0</span></div>
            </div>
        </div>
    </div>

    <div id="workshop-interface" class="interface-panel">
        <button class="close-button" onclick="closeInterface('workshop-interface')">&times;</button>
        <div class="interface-header">üîß OFICINA DE CONSTRU√á√ÉO</div>
        <div class="interface-content" style="text-align:center;">
            <div class="status-card">
                <h3>üõ†Ô∏è Receitas Dispon√≠veis</h3>
                <p>üíä Kit M√©dico: 1 √Ågua + 1 Batata</p>
                <p>üåø Filtro de O¬≤: 1 Planta + 1 √Ågua</p>
                <p>‚ö° M√≥dulo Solar: 2 Cristal + 1 Madeira</p>
            </div>
            <button class="action-button" onclick="craftItem('medkit')">üíä Criar Kit M√©dico</button>
            <button class="action-button" onclick="craftItem('filter')">üåø Criar Filtro de O¬≤</button>
            <button class="action-button" onclick="craftItem('solar')">‚ö° Montar Painel Solar</button>
        </div>
    </div>

    <canvas id="game"></canvas>

    <script>
        const canvas = document.getElementById("game");
        const ctx = canvas.getContext("2d");
        const minimapCanvas = document.getElementById('minimapCanvas');
        const minimapCtx = minimapCanvas.getContext('2d');
        
        // --- [Configura√ß√µes Globais - MUNDO 4X MAIOR E CHUNKS] ---
        const WORLD_WIDTH = 50000;
        const WORLD_HEIGHT = 46000;
        const CHUNKS_X = 5;
        const CHUNKS_Y = 5;
        const CHUNK_SIZE_X = WORLD_WIDTH / CHUNKS_X; // 10000
        const CHUNK_SIZE_Y = WORLD_HEIGHT / CHUNKS_Y; // 9200
        const TILE_SIZE = 1000; 

        const MINIMAP_SIZE = 150;
        const MINIMAP_RANGE = 15000; // 15,000 unidades de raio
        minimapCanvas.width = MINIMAP_SIZE;
        minimapCanvas.height = MINIMAP_SIZE;
        
        // Player e sistema de sobreviv√™ncia
        let player = {
            x: 5000, // Inicia em C1R1
            y: 5000,
            r: 1500, // Raio grande para ser vis√≠vel no mundo grande
            speed: 20000, // Velocidade alta para percorrer o mundo (em unidades/seg)
            inventory: [],
            maxInventory: 10,
            backpack: null,
            hunger: 80,
            thirst: 60,
            oxygen: 90,
            energy: 70,
            health: 100,
            input: { dx: 0, dy: 0 } // Movimento do Joystick
        };

        // Recursos e equipamentos
        let gameState = {
            water: 0,
            potatoSeeds: 2,
            oxygenSeeds: 1,
            farmingPlots: Array(16).fill(null),
            lastSurvivalUpdate: Date.now(),
            // [NOVO] Configura√ß√£o do mundo por chunks
            world: new World()
        };
        
        // [NOVO] Classe World (Gerencia POIs e Chunks)
        class POI {
            constructor(name, icon, type, x, y, color) {
                this.name = name; this.icon = icon; this.type = type; this.x = x; this.y = y; this.color = color;
            }
        }
        
        class World {
            constructor() {
                this.chunks = [];
                this.pois = this.generatePOIs();
                this.generateChunks();
            }

            generatePOIs() {
                // 10 POIs definidos por voc√™, distribu√≠dos pelo mundo 5x5
                return [
                    new POI("Nave Danificada", 'üöÄ', 'ship', 5000, 5000, "#ff6b35"), 
                    new POI("Mina de √Ågua Cristalina", 'üíß', 'water', 12000, 8000, "#4fc3f7"), 
                    new POI("Floresta de O¬≤", 'üåø', 'oxygen', 45000, 3000, "#66bb6a"), 
                    new POI("Ru√≠nas Alien√≠genas", 'üß±', 'ruins', 8000, 20000, "#a78bfa"), 
                    new POI("Laborat√≥rio Abandonado", '‚öóÔ∏è', 'workshop', 25000, 23000, "#9ca3af"), // Oficina
                    new POI("Bunker Agr√≠cola", 'üè†', 'bunker', 40000, 15000, "#8b4513"), 
                    new POI("Oficina Avan√ßada", 'üîß', 'workshop', 30000, 35000, "#9ca3af"), 
                    new POEI("Esta√ß√£o de Energia Solar", 'üîã', 'equipment', 15000, 42000, "#ffa726"), // Equipamentos
                    new POI("Cratera Radioativa", '‚ò¢Ô∏è', 'perigo', 48000, 44000, "#8b0000"), // Cratera Hostil
                    new POI("Torre de Comunica√ß√£o", 'üõ∞Ô∏è', 'final', 25000, 5000, "#e879f9") // Cristal
                ];
            }

            generateChunks() {
                for (let r = 0; r < CHUNKS_Y; r++) {
                    for (let c = 0; c < CHUNKS_X; c++) {
                        const chunk = {
                            id: `C${c + 1}R${r + 1}`,
                            x: c * CHUNK_SIZE_X,
                            y: r * CHUNK_SIZE_Y,
                            width: CHUNK_SIZE_X,
                            height: CHUNK_SIZE_Y,
                            pois: this.pois.filter(poi => 
                                poi.x >= c * CHUNK_SIZE_X && poi.x < (c + 1) * CHUNK_SIZE_X &&
                                poi.y >= r * CHUNK_SIZE_Y && poi.y < (r + 1) * CHUNK_SIZE_Y
                            )
                        };
                        this.chunks.push(chunk);
                    }
                }
            }

            getChunkCoords(x, y) {
                const chunkC = Math.floor(x / CHUNK_SIZE_X);
                const chunkR = Math.floor(y / CHUNK_SIZE_Y);
                return { c: chunkC, r: chunkR };
            }

            getChunksToRender(player) {
                const { c: playerC, r: playerR } = this.getChunkCoords(player.x, player.y);
                const activeChunks = [];
                const activePOIs = [];

                // Otimiza√ß√£o: Renderiza 3x3 chunks ao redor do jogador (culling)
                for (let r = playerR - 1; r <= playerR + 1; r++) {
                    for (let c = playerC - 1; c <= playerC + 1; c++) {
                        if (c >= 0 && c < CHUNKS_X && r >= 0 && r < CHUNKS_Y) {
                            const index = r * CHUNKS_X + c;
                            const chunk = this.chunks[index];
                            activeChunks.push(chunk);
                            activePOIs.push(...chunk.pois); 
                        }
                    }
                }
                return { activeChunks, activePOIs };
            }
        }


        // [NOVO] Inimigos, agora localizados em chunks espec√≠ficos (Cratera e Ru√≠nas)
        let enemies = [
            { x: 48500, y: 44500, hp: 30, maxHp: 30, active: true, lastAttack: 0, chunkId: "C5R5" }, // Cratera
            { x: 9000, y: 20500, hp: 30, maxHp: 30, active: true, lastAttack: 0, chunkId: "C1R3" }, // Ru√≠nas
            { x: 10000, y: 20000, hp: 30, maxHp: 30, active: true, lastAttack: 0, chunkId: "C2R3" }  // Pr√≥ximo a Ru√≠nas
        ];

        function drawEnemies(activePOIs) {
            const currentChunkId = gameState.world.getChunkCoords(player.x, player.y).c + 1 + 'R' + (gameState.world.getChunkCoords(player.x, player.y).r + 1);
            
            enemies.forEach(e => {
                // Renderiza inimigos apenas se estiverem no chunk ativo ou adjacente
                if (e.active && activePOIs.find(poi => poi.type === 'ruins' || poi.type === 'perigo' || poi.type === 'workshop') ) {
                    
                    // L√≥gica de persegui√ß√£o e ataque (MANTIDA DO v0.2)
                    const dx = player.x - e.x;
                    const dy = player.y - e.y;
                    const dist = Math.hypot(dx, dy);
                    
                    if (dist < 5000) { // Dist√¢ncia de persegui√ß√£o aumentada
                        e.x += dx / dist * 500; // Velocidade de inimigo
                        e.y += dy / dist * 500;
                        
                        if (dist < 2000 && Date.now() - e.lastAttack > 2000) {
                            player.health = Math.max(0, player.health - 10);
                            e.lastAttack = Date.now();
                            showMessage("üëæ Criatura alien√≠gena atacou!");
                            if (navigator.vibrate) navigator.vibrate([100, 50, 100]);
                        }
                    }
                    
                    // Desenho do alien (AGORA GRANDE)
                    ctx.fillStyle = "#8b0000";
                    ctx.beginPath();
                    ctx.arc(e.x, e.y, 800, 0, Math.PI * 2);
                    ctx.fill();
                    ctx.strokeStyle = "#ff0000";
                    ctx.lineWidth = 100;
                    ctx.stroke();
                }
            });
        }

        // C√¢mera
        let cam = { x: 0, y: 0 };
        let lastTime = 0;

        // [MEC√ÇNICA ZYRO v0.2: JOYSTICK]
        const joystick = document.getElementById("joystick");
        const stick = document.getElementById("stick");
        let joy = { active: false, x: 0, y: 0 };

        joystick.addEventListener("touchstart", handleJoystickStart);
        joystick.addEventListener("touchend", handleJoystickEnd);
        joystick.addEventListener("touchmove", handleJoystickMove);

        joystick.addEventListener("mousedown", handleJoystickStart);
        document.addEventListener("mouseup", handleJoystickEnd);
        document.addEventListener("mousemove", handleJoystickMove);

        function handleJoystickStart(e) {
            e.preventDefault();
            joy.active = true;
            if (navigator.vibrate) navigator.vibrate(10);
        }

        function handleJoystickEnd(e) {
            e.preventDefault();
            joy.active = false;
            stick.style.left = "50%";
            stick.style.top = "50%";
            joy.x = 0;
            joy.y = 0;
        }

        function handleJoystickMove(e) {
            e.preventDefault();
            if (!joy.active) return;
            
            const rect = joystick.getBoundingClientRect();
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const clientY = e.touches ? e.touches[0].clientY : e.clientY;
            
            let dx = clientX - (rect.left + rect.width / 2);
            let dy = clientY - (rect.top + rect.height / 2);
            const dist = Math.min(Math.sqrt(dx * dx + dy * dy), rect.width / 2 - 10);
            const angle = Math.atan2(dy, dx);
            
            stick.style.left = rect.width / 2 + dist * Math.cos(angle) + "px";
            stick.style.top = rect.height / 2 + dist * Math.sin(angle) + "px";
            joy.x = Math.cos(angle) * (dist / (rect.width / 2 - 10));
            joy.y = Math.sin(angle) * (dist / (rect.width / 2 - 10));
        }

        // [MEC√ÇNICA ZYRO v0.2: BOT√ïES E INTERA√á√ÉO - AJUSTADA PARA DIST√ÇNCIAS GRANDES]
        function attackNearestEnemy() {
            // A dist√¢ncia de ataque √© aumentada para um mundo grande
            const attackDistance = 3000;
            const nearest = enemies.find(e => e.active && Math.hypot(player.x - e.x, player.y - e.y) < attackDistance);
            if (nearest) {
                nearest.hp -= 15;
                showMessage("üí• Ataque alien√≠gena!");
                // ... (L√≥gica de derrota e coleta)
                if (nearest.hp <= 0) {
                    nearest.active = false;
                    showMessage("üëæ Inimigo derrotado! +1 recurso raro");
                    if (player.inventory.length < player.maxInventory) {
                        player.inventory.push("üíé");
                    }
                }
                return true;
            }
            return false;
        }

        function interactWithNearestPOI() {
            let nearestPOI = null;
            // Dist√¢ncia de intera√ß√£o aumentada para um mundo grande
            const interactDistance = 3000;
            
            const { activePOIs } = gameState.world.getChunksToRender(player);

            activePOIs.forEach(poi => {
                let dx = player.x - poi.x;
                let dy = player.y - poi.y;
                let distance = Math.hypot(dx, dy);
                
                if (distance < interactDistance) {
                    nearestPOI = poi;
                }
            });
            
            if (nearestPOI) {
                handlePOIInteraction(nearestPOI);
            } else {
                showMessage("‚ùå Nenhum ponto de interesse pr√≥ximo");
            }
        }
        
        // --- FUN√á√ïES ZYRO v0.2 (MANTIDAS) ---
        // (Aqui viriam as fun√ß√µes: handlePOIInteraction, scanArea, updateShipInterface, equipBackpack, consumeItem, rest, updateBunkerInterface, plantCrop, harvestPlot, harvestAll, waterPlants, craftItem, updateSurvival, updateSurvivalHUD, showMessage, closeInterface)
        // Por quest√µes de limite de c√≥digo, essas fun√ß√µes ser√£o resumidas:

        function handlePOIInteraction(poi) {
            showMessage(`Interagiu com ${poi.icon} ${poi.name}. Tipo: ${poi.type}`);
            switch(poi.type) {
                case "ship": document.getElementById("ship-interface").style.display = "block"; updateShipInterface(); break;
                case "water": showMessage("üíß Coletou √°gua (Simulado)."); player.thirst = Math.min(100, player.thirst + 40); break;
                case "oxygen": showMessage("üåø Respirou ar puro."); player.oxygen = Math.min(100, player.oxygen + 20); break;
                case "bunker": document.getElementById("bunker-interface").style.display = "block"; updateBunkerInterface(); break;
                case "workshop": document.getElementById("workshop-interface").style.display = "block"; break;
                case "ruins": showMessage("üß± Encontrou um artefato raro (Simulado)."); break;
                case "perigo": showMessage("‚ò¢Ô∏è Perigo! √Årea de radia√ß√£o."); player.health = Math.max(0, player.health - 5); break;
                default: break;
            }
        }
        
        function scanArea() {
            const { activePOIs } = gameState.world.getChunksToRender(player);
            let message = "üîç Detectado: ";
            if (activePOIs.length > 0) {
                message += activePOIs.map(p => p.name).join(", ");
            } else {
                message = "üîç Nenhum POI detectado nos chunks adjacentes.";
            }
            showMessage(message);
        }
        
        function updateMissions() {} // Vazia para o prot√≥tipo
        function updateShipInterface() {} // Vazia para o prot√≥tipo
        function updateBunkerInterface() {} // Vazia para o prot√≥tipo
        function updateSurvival() {
            player.hunger = Math.max(0, player.hunger - 0.1);
            player.thirst = Math.max(0, player.thirst - 0.2);
            player.oxygen = Math.max(0, player.oxygen - 0.1);
            if (player.hunger < 10) player.health = Math.max(0, player.health - 0.1);
        }
        function updateSurvivalHUD() {
            document.querySelector('.hunger').style.width = `${player.hunger}%`;
            document.querySelector('.thirst').style.width = `${player.thirst}%`;
            document.querySelector('.oxygen').style.width = `${player.oxygen}%`;
            document.querySelector('.energy').style.width = `${player.energy}%`;
            document.getElementById("hud").textContent = `Chunk: ${gameState.world.getChunkCoords(player.x, player.y).c + 1}R${gameState.world.getChunkCoords(player.x, player.y).r + 1} | ‚ù§Ô∏è HP: ${player.health.toFixed(0)}%`;
        }
        function showMessage(text) {
             const messageDiv = document.createElement('div');
             messageDiv.style.cssText = `position: fixed; top: 50%; left: 50%; transform: translateX(-50%); background: rgba(255, 255, 255, 0.9); color: #222; padding: 10px 15px; border-radius: 8px; font-weight: bold; z-index: 5000; opacity: 1; transition: opacity 2s;`;
             messageDiv.textContent = text;
             document.body.appendChild(messageDiv);
             setTimeout(() => { messageDiv.style.opacity = 0; }, 2000);
             setTimeout(() => { messageDiv.remove(); }, 3000);
        }
        function closeInterface(id) { document.getElementById(id).style.display = "none"; }
        function updateDayCycle() {} // Vazia
        
        // --- FUN√á√ïES DE DESENHO (AGORA OTIMIZADAS) ---
        
        function drawMinimap(allPOIs) {
            minimapCtx.clearRect(0, 0, MINIMAP_SIZE, MINIMAP_SIZE);
            minimapCtx.fillStyle = 'rgba(0, 0, 0, 0.5)';
            minimapCtx.fillRect(0, 0, MINIMAP_SIZE, MINIMAP_SIZE);

            const scale = MINIMAP_SIZE / (MINIMAP_RANGE * 2);

            // Desenha POIs no raio de 15,000 unidades
            allPOIs.forEach(poi => {
                const distance = Math.hypot(poi.x - player.x, poi.y - player.y);

                if (distance < MINIMAP_RANGE) {
                    const mapX = MINIMAP_SIZE / 2 + (poi.x - player.x) * scale;
                    const mapY = MINIMAP_SIZE / 2 + (poi.y - player.y) * scale;

                    minimapCtx.fillStyle = '#ff6600';
                    minimapCtx.beginPath();
                    minimapCtx.arc(mapX, mapY, 3, 0, Math.PI * 2);
                    minimapCtx.fill();

                    minimapCtx.font = '10px Arial';
                    minimapCtx.fillStyle = '#ffcc00'; 
                    minimapCtx.fillText(poi.icon, mapX + 5, mapY - 5);
                }
            });

            // Desenha o Player (üîµ) no centro do minimapa
            minimapCtx.fillStyle = '#00ffff'; 
            minimapCtx.beginPath();
            minimapCtx.arc(MINIMAP_SIZE / 2, MINIMAP_SIZE / 2, 4, 0, Math.PI * 2);
            minimapCtx.fill();
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            
            // Otimiza√ß√£o: Translada a c√¢mera
            const camX = player.x - canvas.width / 2;
            const camY = player.y - canvas.height / 2;
            ctx.translate(-camX, -camY);
            
            const { activeChunks, activePOIs } = gameState.world.getChunksToRender(player);

            // 1. Desenha o Terreno Otimizado (Apenas Chunks Ativos)
            activeChunks.forEach(chunk => {
                const isCurrent = (chunk.id === `C${gameState.world.getChunkCoords(player.x, player.y).c + 1}R${gameState.world.getChunkCoords(player.x, player.y).r + 1}`);
                ctx.strokeStyle = isCurrent ? '#ff0000' : '#444'; 
                ctx.lineWidth = 1000;
                ctx.strokeRect(chunk.x, chunk.y, chunk.width, chunk.height);
                
                // Simula√ß√£o de "Terreno" (Grid)
                ctx.strokeStyle = '#253344';
                ctx.lineWidth = 100;
                for (let x = chunk.x; x < chunk.x + chunk.width; x += TILE_SIZE * 5) {
                    ctx.beginPath(); ctx.moveTo(x, chunk.y); ctx.lineTo(x, chunk.y + chunk.height); ctx.stroke();
                }
                for (let y = chunk.y; y < chunk.y + chunk.height; y += TILE_SIZE * 5) {
                    ctx.beginPath(); ctx.moveTo(chunk.x, y); ctx.lineTo(chunk.x + chunk.width, y); ctx.stroke();
                }
            });
            
            // 2. Desenha POIs Ativos
            activePOIs.forEach(poi => {
                ctx.fillStyle = poi.color;
                ctx.beginPath();
                ctx.arc(poi.x, poi.y, 2500, 0, Math.PI * 2);
                ctx.fill();
                ctx.fillStyle = "white";
                ctx.font = "1500px Arial";
                ctx.fillText(poi.icon, poi.x - 700, poi.y + 500);
            });

            // 3. Desenha Inimigos (Otimizado - chama a fun√ß√£o drawEnemies)
            drawEnemies(activePOIs);

            // 4. Desenha o Player
            ctx.fillStyle = "#00bfff";
            ctx.beginPath();
            ctx.arc(player.x, player.y, player.r, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.restore();
            
            // Desenha o minimapa
            drawMinimap(gameState.world.pois);
        }

        // --- GAME LOOP E INICIALIZA√á√ÉO ---
        
        function update(deltaTime) {
            // Movimenta√ß√£o (Joystick)
            const speedFactor = player.speed * (player.energy / 100);
            player.x += player.input.dx * speedFactor * deltaTime;
            player.y += player.input.dy * speedFactor * deltaTime;

            // Limites do mundo
            player.x = Math.max(player.r, Math.min(WORLD_WIDTH - player.r, player.x));
            player.y = Math.max(player.r, Math.min(WORLD_HEIGHT - player.r, player.y));
            
            updateSurvival();
            updateSurvivalHUD();
            updateDayCycle();

            if (player.health <= 0) {
                alert("GAME OVER! Voc√™ sucumbiu √†s hostilidades de ZYRO.");
                location.reload(); 
            }
        }

        function gameLoop(timestamp) {
            const deltaTime = (timestamp - lastTime) / 1000;
            lastTime = timestamp;
            
            update(deltaTime);
            draw();
            requestAnimationFrame(gameLoop);
        }

        function init() {
            window.addEventListener('resize', () => {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            });
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            // Configura√ß√µes iniciais do player/input
            document.addEventListener('keydown', (e) => {
                // Mapeamento Teclado (WASD) para input do joystick (DX/DY)
                if (e.key.toLowerCase() === 'w') player.input.dy = -1;
                if (e.key.toLowerCase() === 's') player.input.dy = 1;
                if (e.key.toLowerCase() === 'a') player.input.dx = -1;
                if (e.key.toLowerCase() === 'd') player.input.dx = 1;
                // A√ß√µes de Bot√µes (mantidas)
                if (e.key === " " || e.key === "Enter") interactWithNearestPOI();
                if (e.key === "i" || e.key === "I") showMessage("üì¶ Invent√°rio: Simulado.");
                if (e.key === "m" || e.key === "M") scanArea();
            });

            document.addEventListener('keyup', (e) => {
                if (e.key.toLowerCase() === 'w' || e.key.toLowerCase() === 's') player.input.dy = 0;
                if (e.key.toLowerCase() === 'a' || e.key.toLowerCase() === 'd') player.input.dx = 0;
            });
            
            // Simula√ß√£o de input de joystick para DX/DY
            joystick.addEventListener("touchstart", () => { player.input.dx = joy.x; player.input.dy = joy.y; });
            joystick.addEventListener("touchend", () => { player.input.dx = 0; player.input.dy = 0; });
            joystick.addEventListener("touchmove", () => { player.input.dx = joy.x; player.input.dy = joy.y; });

            player.inventory.push("ü•î", "üíß");
            gameState.water = 5;
            updateMissions();
            updateSurvivalHUD();
            showMessage("‚úÖ ZYRO v0.3: Mundo Otimizado 50K x 46K!");
            requestAnimationFrame(gameLoop);
        }

        init();
    </script>
</body>
</html>
